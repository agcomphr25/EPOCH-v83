// src/pages/OrderEntryPage.jsx

import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import toast from 'react-hot-toast';

export default function OrderEntryPage() {
  const { orderId } = useParams();
  const navigate = useNavigate();

  // form state
  const [form, setForm] = useState({
    orderDate: '',
    customerName: '',
    modelName: '',
    total: '',
  });

  const [status, setStatus] = useState('DRAFT');      // track server status
  const [loading, setLoading] = useState(!!orderId);  // only load if editing
  const [saving, setSaving] = useState(false);
  const [confirming, setConfirming] = useState(false);
  const [finalizing, setFinalizing] = useState(false);

  // Fetch existing draft when editing
  useEffect(() => {
    if (!orderId) return;

    const fetchOrder = async () => {
      try {
        const { data } = await axios.get(`/api/orders/${orderId}`);
        // expect { orderId, orderDate, customerName, modelName, total, status }
        setForm({
          orderDate: data.orderDate.slice(0,10),  // YYYY-MM-DD
          customerName: data.customerName,
          modelName: data.modelName,
          total: data.total.toString(),
        });
        setStatus(data.status);
      } catch (err) {
        console.error(err);
        toast.error('Failed to load order');
      } finally {
        setLoading(false);
      }
    };

    fetchOrder();
  }, [orderId]);

  // generic form field handler
  const handleChange = e => {
    const { name, value } = e.target;
    setForm(f => ({ ...f, [name]: value }));
  };

  // Save Draft (POST or PUT)
  const handleSave = async () => {
    setSaving(true);
    try {
      if (orderId) {
        await axios.put(`/api/orders/${orderId}`, form);
        toast.success('Draft updated');
      } else {
        const resp = await axios.post('/api/orders', form);
        toast.success('Draft created');
        navigate(`/orders/edit/${resp.data.orderId}`, { replace: true });
      }
    } catch (err) {
      console.error(err);
      toast.error('Failed to save draft');
    } finally {
      setSaving(false);
    }
  };

  // Send for Confirmation
  const handleConfirm = async () => {
    if (!orderId) return;
    setConfirming(true);
    try {
      await axios.post(`/api/orders/${orderId}/send-confirmation`);
      toast.success('Sent for confirmation');
      setStatus('CONFIRMED');
    } catch (err) {
      console.error(err);
      toast.error('Failed to send confirmation');
    } finally {
      setConfirming(false);
    }
  };

  // Finalize
  const handleFinalize = async () => {
    if (!orderId) return;
    setFinalizing(true);
    try {
      await axios.post(`/api/orders/${orderId}/finalize`);
      toast.success('Order finalized');
      navigate('/orders'); // or wherever makes sense
    } catch (err) {
      console.error(err);
      toast.error('Failed to finalize');
    } finally {
      setFinalizing(false);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <svg className="animate-spin h-12 w-12 text-blue-600" viewBox="0 0 24 24">
          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" />
          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8z" />
        </svg>
      </div>
    );
  }

  return (
    <div className="max-w-xl mx-auto p-6 bg-white shadow rounded">
      <h1 className="text-2xl font-semibold mb-4">
        {orderId ? `Edit Order #${orderId}` : 'New Order'}
      </h1>

      <div className="space-y-4">
        <div>
          <label className="block font-medium">Date</label>
          <input
            type="date"
            name="orderDate"
            value={form.orderDate}
            onChange={handleChange}
            className="w-full border px-3 py-2 rounded"
          />
        </div>

        <div>
          <label className="block font-medium">Customer</label>
          <input
            type="text"
            name="customerName"
            value={form.customerName}
            onChange={handleChange}
            placeholder="Acme Corp"
            className="w-full border px-3 py-2 rounded"
          />
        </div>

        <div>
          <label className="block font-medium">Model</label>
          <input
            type="text"
            name="modelName"
            value={form.modelName}
            onChange={handleChange}
            placeholder="Model X"
            className="w-full border px-3 py-2 rounded"
          />
        </div>

        <div>
          <label className="block font-medium">Total ($)</label>
          <input
            type="number"
            name="total"
            value={form.total}
            onChange={handleChange}
            step="0.01"
            className="w-full border px-3 py-2 rounded"
          />
        </div>
      </div>

      <div className="mt-6 flex space-x-3">
        <button
          onClick={handleSave}
          disabled={saving || confirming || finalizing}
          className="px-4 py-2 bg-gray-800 text-white rounded hover:bg-gray-900 disabled:opacity-50"
        >
          {saving ? 'Saving…' : 'Save Draft'}
        </button>

        {orderId && (
          <>
            <button
              onClick={handleConfirm}
              disabled={saving || confirming || finalizing || status !== 'DRAFT'}
              className={`px-4 py-2 rounded text-white ${
                status === 'DRAFT'
                  ? 'bg-yellow-500 hover:bg-yellow-600'
                  : 'bg-yellow-200 cursor-not-allowed'
              } disabled:opacity-50`}
            >
              {confirming ? 'Sending…' : 'Send for Confirmation'}
            </button>

            <button
              onClick={handleFinalize}
              disabled={saving || confirming || finalizing || status !== 'CONFIRMED'}
              className={`px-4 py-2 rounded text-white ${
                status === 'CONFIRMED'
                  ? 'bg-blue-500 hover:bg-blue-600'
                  : 'bg-blue-200 cursor-not-allowed'
              } disabled:opacity-50`}
            >
              {finalizing ? 'Finalizing…' : 'Finalize'}
            </button>
          </>
        )}
      </div>
    </div>
  );
}
