import React, { useState, FormEvent } from "react";

interface FeatureSelection {
  label: string;
  value: string;
  price: number;
}

export default function OrderEntryPage() {
  // Form state
  const [orderId] = useState("AG200");
  const [orderDate, setOrderDate] = useState("2025-07-21");
  const [dueDate, setDueDate] = useState("2025-08-20");
  const [customer, setCustomer] = useState("");
  const [hasCustomerPO, setHasCustomerPO] = useState(false);
  const [fbOrderNumber, setFbOrderNumber] = useState("");
  const [hasAgrOrder, setHasAgrOrder] = useState(false);
  const [stockModel, setStockModel] = useState("");
  const [overridePrice, setOverridePrice] = useState(false);
  const [handedness, setHandedness] = useState("");
  const [actionLength, setActionLength] = useState("");
  const [actionInlet, setActionInlet] = useState("");
  const [bottomMetal, setBottomMetal] = useState("");
  const [barrelInlet, setBarrelInlet] = useState("");
  const [qds, setQds] = useState("");
  const [lop, setLop] = useState("");
  const [rails, setRails] = useState("");
  const [texture, setTexture] = useState("");
  const [swivelStuds, setSwivelStuds] = useState("");
  const [otherOptions, setOtherOptions] = useState("");
  const [paintOptions, setPaintOptions] = useState("");
  const [customOrder, setCustomOrder] = useState(false);
  const [notes, setNotes] = useState("");
  const [shipping, setShipping] = useState(36.95);

  // Summary computation
  const featureSelections: FeatureSelection[] = [
    { label: "Stock Model", value: stockModel, price: 0 },
    { label: "Handedness", value: handedness, price: 0 },
    { label: "Action Length", value: actionLength, price: 0 },
    { label: "Action Inlet", value: actionInlet, price: 0 },
    { label: "Bottom Metal", value: bottomMetal, price: 0 },
    { label: "Barrel Inlet", value: barrelInlet, price: 0 },
    { label: "QDs (Quick Detach Cups)", value: qds, price: 0 },
    { label: "LOP (Length of Pull)", value: lop, price: 0 },
    { label: "Rails", value: rails, price: 0 },
    { label: "Texture", value: texture, price: 0 },
    { label: "Swivel Studs", value: swivelStuds, price: 0 },
    { label: "Other Options", value: otherOptions, price: 0 },
    { label: "Paint Options", value: paintOptions, price: 0 },
  ];
  const itemCount = 1;
  const subtotal = featureSelections.reduce((sum, f) => sum + f.price, 0);
  const total = subtotal + shipping;

  function handleSubmit(e: FormEvent) {
    e.preventDefault();
    const form = new FormData(e.currentTarget as HTMLFormElement);
    // TODO: send form to API
    console.log(Object.fromEntries(form.entries()));
  }

  // Nav links
  const navLinks = [
    { name: "Order Entry", href: "/order-entry" },
    { name: "All Orders", href: "/orders-list" },
    { name: "Draft Orders", href: "/draft-orders" },
    { name: "Module 8 Test", href: "/module8-test" },
    { name: "Customer Management", href: "/customers" },
    { name: "Purchase Orders", href: "/purchase-orders" },
    { name: "Production Tracking", href: "/production-tracking" },
    { name: "Barcode Scanner", href: "/barcode-scanner" },
    { name: "Layup Scheduler", href: "/layup-scheduler" },
    { name: "Forms & Reports", href: "/module/forms-reports" },
    { name: "Inventory", href: "/inventory" },
    { name: "QC & Maintenance", href: "/qc-maintenance" },
    { name: "Employees", href: "/employees" },
    { name: "Finance", href: "/finance" },
  ];

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header & Nav */}
      <header className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <h1 className="text-xl font-semibold text-gray-900">EPOCH v8</h1>
            <nav className="space-x-2 overflow-x-auto">
              {navLinks.map((link) => (
                <a key={link.href} href={link.href}>
                  <button
                    className={`whitespace-nowrap rounded-md px-4 py-2 text-sm font-medium transition-colors focus:outline-none $
                      link.name === "Order Entry"
                        ? "bg-primary text-white"
                        : "hover:bg-gray-100"
                    }`}
                  >
                    {link.name}
                  </button>
                </a>
              ))}
            </nav>
            <div className="text-sm text-gray-600">Manufacturing ERP System</div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="container mx-auto px-4 py-8">
        <div className="max-w-7xl mx-auto grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Form Section */}
          <form
            onSubmit={handleSubmit}
            className="col-span-2 space-y-8"
          >
            <div className="bg-white rounded-lg border shadow-sm p-6 space-y-4">
              <h2 className="text-2xl font-semibold">Order Entry</h2>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {/* Order ID */}
                <div>
                  <label htmlFor="orderId" className="block text-sm font-medium">
                    Order ID
                  </label>
                  <input
                    type="text"
                    id="orderId"
                    name="orderId"
                    readOnly
                    value={orderId}
                    className="mt-1 w-full rounded-md border-gray-300 bg-gray-50"
                  />
                </div>
                {/* Order Date */}
                <div>
                  <label htmlFor="orderDate" className="block text-sm font-medium">
                    Order Date
                  </label>
                  <input
                    type="date"
                    id="orderDate"
                    name="orderDate"
                    value={orderDate}
                    onChange={(e) => setOrderDate(e.target.value)}
                    className="mt-1 w-full rounded-md border-gray-300"
                  />
                </div>
                {/* Estimated Completion Date */}
                <div>
                  <label htmlFor="dueDate" className="block text-sm font-medium">
                    Estimated Completion Date
                  </label>
                  <input
                    type="date"
                    id="dueDate"
                    name="dueDate"
                    value={dueDate}
                    onChange={(e) => setDueDate(e.target.value)}
                    className="mt-1 w-full rounded-md border-gray-300"
                  />
                </div>
              </div>

              {/* Second Row */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label htmlFor="customer" className="block text-sm font-medium">
                    Customer
                  </label>
                  <input
                    type="text"
                    id="customer"
                    name="customer"
                    placeholder="Search customer..."
                    value={customer}
                    onChange={(e) => setCustomer(e.target.value)}
                    className="mt-1 w-full rounded-md border-gray-300"
                  />
                </div>
                <div className="flex items-center space-x-2 mt-6">
                  <input
                    id="hasCustomerPO"
                    name="hasCustomerPO"
                    type="checkbox"
                    checked={hasCustomerPO}
                    onChange={() => setHasCustomerPO(!hasCustomerPO)}
                    className="h-4 w-4 rounded border-gray-300"
                  />
                  <label htmlFor="hasCustomerPO" className="text-sm">
                    Enable Customer PO
                  </label>
                </div>
                <div>
                  <label htmlFor="fbOrderNumber" className="block text-sm font-medium">
                    FB Order #
                  </label>
                  <input
                    type="text"
                    id="fbOrderNumber"
                    name="fbOrderNumber"
                    placeholder="Enter FB Order #..."
                    value={fbOrderNumber}
                    onChange={(e) => setFbOrderNumber(e.target.value)}
                    className="mt-1 w-full rounded-md border-gray-300"
                  />
                </div>
                <div className="flex items-center space-x-2 mt-6">
                  <input
                    id="hasAgrOrder"
                    name="hasAgrOrder"
                    type="checkbox"
                    checked={hasAgrOrder}
                    onChange={() => setHasAgrOrder(!hasAgrOrder)}
                    className="h-4 w-4 rounded border-gray-300"
                  />
                  <label htmlFor="hasAgrOrder" className="text-sm">
                    Enable AGR Order
                  </label>
                </div>
              </div>

              {/* Feature Fields Grid */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {/* Map each feature into a select */}
                {[
                  { id: "stockModel", label: "Stock Model", state: stockModel, setter: setStockModel },
                  { id: "handedness", label: "Handedness", state: handedness, setter: setHandedness },
                  { id: "actionLength", label: "Action Length", state: actionLength, setter: setActionLength },
                  { id: "actionInlet", label: "Action Inlet", state: actionInlet, setter: setActionInlet },
                  { id: "bottomMetal", label: "Bottom Metal", state: bottomMetal, setter: setBottomMetal },
                  { id: "barrelInlet", label: "Barrel Inlet", state: barrelInlet, setter: setBarrelInlet },
                  { id: "qds", label: "QDs (Quick Detach Cups)", state: qds, setter: setQds },
                  { id: "lop", label: "LOP (Length of Pull)", state: lop, setter: setLop },
                  { id: "rails", label: "Rails", state: rails, setter: setRails },
                  { id: "texture", label: "Texture", state: texture, setter: setTexture },
                  { id: "swivelStuds", label: "Swivel Studs", state: swivelStuds, setter: setSwivelStuds },
                  { id: "otherOptions", label: "Other Options", state: otherOptions, setter: setOtherOptions },
                  { id: "paintOptions", label: "Paint Options", state: paintOptions, setter: setPaintOptions },
                ].map((field) => (
                  <div key={field.id} className="space-y-2">
                    <label htmlFor={field.id} className="block text-sm font-medium">
                      {field.label}
                    </label>
                    <select
                      id={field.id}
                      name={field.id}
                      value={field.state}
                      onChange={(e) => field.setter(e.target.value)}
                      className="mt-1 w-full rounded-md border-gray-300"
                    >
                      <option value="" disabled>Select…</option>
                      {/* TODO: populate with real options */}
                    </select>
                  </div>
                ))}

                {/* Custom Order Checkbox */}
                <div className="flex items-center space-x-2 mt-4">
                  <input
                    id="customOrder"
                    name="customOrder"
                    type="checkbox"
                    checked={customOrder}
                    onChange={() => setCustomOrder(!customOrder)}
                    className="h-4 w-4 rounded border-gray-300"
                  />
                  <label htmlFor="customOrder" className="text-sm">
                    Custom Order
                  </label>
                </div>

                {/* Notes */}
                <div className="mt-4 md:col-span-2">
                  <label htmlFor="notes" className="block text-sm font-medium">
                    Notes
                  </label>
                  <textarea
                    id="notes"
                    name="notes"
                    rows={4}
                    placeholder="Any special requirements or notes..."
                    value={notes}
                    onChange={(e) => setNotes(e.target.value)}
                    className="mt-1 w-full rounded-md border-gray-300"
                  />
                </div>

                {/* Submit Buttons */}
                <div className="mt-6 md:col-span-2 flex justify-end space-x-3">
                  <button
                    type="button"
                    className="px-4 py-2 rounded-md border"
                  >
                    Save as Draft
                  </button>
                  <button
                    type="submit"
                    className="px-4 py-2 rounded-md bg-primary text-white"
                  >
                    Create Order
                  </button>
                </div>
              </div>
            </div>
          </form>

          {/* Summary Section */}
          <aside className="space-y-6">
            <div className="bg-white rounded-lg border shadow-sm p-6 sticky top-8">
              <h2 className="text-xl font-semibold">Order Summary</h2>
              <div className="flex justify-between items-center mt-4">
                <span className="text-2xl font-bold">{itemCount}</span>
                <span className="text-2xl font-bold text-blue-600">
                  ${total.toFixed(2)}
                </span>
              </div>

              <div className="mt-6 space-y-2 text-sm">
                <h4 className="font-medium">Feature Selections</h4>
                {featureSelections.map((f) => (
                  <div key={f.label} className="flex justify-between">
                    <span>{f.label}:</span>
                    <span className="flex space-x-2">
                      <span className={f.value ? "" : "text-gray-400"}>
                        {f.value || 'Not selected'}
                      </span>
                      <span>${f.price.toFixed(2)}</span>
                    </span>
                  </div>
                ))}
              </div>

              <div className="mt-6 space-y-1 text-sm">
                <label htmlFor="shipping" className="block">
                  Shipping &amp; Handling
                </label>
                <input
                  id="shipping"
                  name="shipping"
                  type="number"
                  step="0.01"
                  value={shipping}
                  onChange={(e) => setShipping(parseFloat(e.target.value))}
                  className="mt-1 w-full rounded-md border-gray-300"
                />
              </div>

              <div className="mt-6 border-t pt-4 space-y-2 text-sm">
                <div className="flex justify-between">
                  <span>Subtotal:</span>
                  <span>${subtotal.toFixed(2)}</span>
                </div>
                <div className="flex justify-between">
                  <span>Shipping &amp; Handling:</span>
                  <span>${shipping.toFixed(2)}</span>
                </div>
                <div className="flex justify-between font-bold text-lg">
                  <span>Total:</span>
                  <span>${total.toFixed(2)}</span>
                </div>
                <div className="flex items-center space-x-2 mt-2">
                  <input
                    id="markAsPaid"
                    name="markAsPaid"
                    type="checkbox"
                    className="h-4 w-4 rounded border-gray-300"
                  />
                  <label htmlFor="markAsPaid" className="text-sm">
                    Mark as Paid
                  </label>
                </div>
              </div>

              <button
                type="button"
                className="w-full mt-4 px-4 py-2 rounded-md bg-primary text-white"
              >
                Create Order
              </button>
            </div>
          </aside>
        </div>
      </main>
    </div>
  );
}