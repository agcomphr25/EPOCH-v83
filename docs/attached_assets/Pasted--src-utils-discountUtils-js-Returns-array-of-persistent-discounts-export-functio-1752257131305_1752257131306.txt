// src/utils/discountUtils.js

/**
 * Returns array of persistent discounts.
 */
export function getPersistentDiscount(customerType, isMilLeo) {
  const results = [];

  switch (customerType) {
    case 'AGR–Gunbuilder':
      results.push({ type: 'Gunbuilder', amount: 0.20 });
      break;
    case 'AGR–Individual':
      results.push({ type: 'Industry', amount: 0.10 });
      if (isMilLeo) {
        results.push({ type: 'MIL/LEO', amount: 50 });
      }
      break;
    case 'OEM':
    case 'Distributor':
      // no discount
      break;
    default:
      throw new Error(`Unknown customer type: ${customerType}`);
  }

  return results;
}

/**
 * Filters and returns active short-term % discounts for a given date.
 */
export function getActiveShortTermDiscounts(date, sales) {
  const ts = date.getTime();
  return sales
    .filter(sale => {
      const start = new Date(sale.startDate).getTime();
      const end = new Date(sale.endDate).getTime();
      return start <= ts && ts <= end;
    })
    .map(sale => ({ name: sale.name, percent: sale.percent }));
}

/**
 * Calculates final price with breakdown for all discounts.
 */
export function calculateFinalPrice(basePrice, customerType, isMilLeo, date, shortTermSales) {
  let price = basePrice;
  const breakdown = [];

  // Persistent %
  const persistent = getPersistentDiscount(customerType, isMilLeo);
  persistent.forEach(d => {
    if (d.type !== 'MIL/LEO') {
      const amt = price * d.amount;
      price -= amt;
      breakdown.push({ type: d.type, amount: amt });
    }
  });

  // MIL/LEO flat
  persistent.forEach(d => {
    if (d.type === 'MIL/LEO') {
      const amt = d.amount;
      price -= amt;
      breakdown.push({ type: d.type, amount: amt });
    }
  });

  // Short-term sales
  shortTermSales.forEach(sale => {
    const amt = price * (sale.percent / 100);
    price -= amt;
    breakdown.push({ type: sale.name, amount: amt });
  });

  return { finalPrice: price, breakdown };
}
