Let’s build the BOM Administration Interface! Here’s the complete React + Tailwind + plain-JS solution, file by file. ✔️

1. src/utils/bomUtils.js
js
Copy
Edit
import axios from 'axios';

/**
 * Fetch all BOM definitions
 */
export async function fetchBOMs() {
  return axios.get('/api/boms');
}

/**
 * Create a new BOM
 * @param {{ modelName: string, revision: string, description: string }} data
 */
export async function createBOM({ modelName, revision, description }) {
  return axios.post('/api/boms', { modelName, revision, description });
}

/**
 * Fetch one BOM with its items
 * @param {string|number} bomId
 */
export async function fetchBOMDetails(bomId) {
  return axios.get(`/api/boms/${bomId}`);
}

/**
 * Update BOM metadata
 * @param {string|number} bomId
 * @param {{ modelName?: string, revision?: string, description?: string }} data
 */
export async function updateBOM(bomId, data) {
  return axios.put(`/api/boms/${bomId}`, data);
}

/**
 * Delete a BOM
 * @param {string|number} bomId
 */
export async function deleteBOM(bomId) {
  return axios.delete(`/api/boms/${bomId}`);
}

/**
 * Add a child item to a BOM
 * @param {string|number} bomId
 * @param {{ partName: string, quantity: number, firstDept: string }} data
 */
export async function addBOMItem(bomId, { partName, quantity, firstDept }) {
  return axios.post(`/api/boms/${bomId}/items`, { partName, quantity, firstDept });
}

/**
 * Update a BOM item (qty, dept)
 * @param {string|number} bomId
 * @param {string|number} itemId
 * @param {{ quantity?: number, firstDept?: string }} data
 */
export async function updateBOMItem(bomId, itemId, data) {
  return axios.put(`/api/boms/${bomId}/items/${itemId}`, data);
}

/**
 * Remove a BOM item
 * @param {string|number} bomId
 * @param {string|number} itemId
 */
export async function deleteBOMItem(bomId, itemId) {
  return axios.delete(`/api/boms/${bomId}/items/${itemId}`);
}
2. src/hooks/useBOMs.js
js
Copy
Edit
import { useState, useEffect } from 'react';
import { fetchBOMs } from '../utils/bomUtils';

export default function useBOMs() {
  const [boms, setBOMs] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    setLoading(true);
    fetchBOMs()
      .then(res => setBOMs(res.data))
      .catch(err => {
        console.error('Error fetching BOMs:', err);
      })
      .finally(() => setLoading(false));
  }, []);

  return { boms, loading };
}
3. src/hooks/useBOMDetails.js
js
Copy
Edit
import { useState, useEffect } from 'react';
import { fetchBOMDetails } from '../utils/bomUtils';

export default function useBOMDetails(bomId) {
  const [bom, setBOM] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (!bomId) return;
    setLoading(true);
    fetchBOMDetails(bomId)
      .then(res => setBOM(res.data))
      .catch(err => {
        console.error(`Error fetching BOM ${bomId}:`, err);
      })
      .finally(() => setLoading(false));
  }, [bomId]);

  return { bom, loading };
}
4. src/components/BOMAdmin.jsx
jsx
Copy
Edit
import React, { useState } from 'react';
import useBOMs from '../hooks/useBOMs';
import { createBOM, deleteBOM } from '../utils/bomUtils';
import BOMEditor from './BOMEditor';

export default function BOMAdmin() {
  const { boms, loading } = useBOMs();
  const [editingId, setEditingId] = useState(null);
  const [newBOM, setNewBOM] = useState({
    modelName: '',
    revision: 'A',
    description: ''
  });

  if (loading) {
    return <div className="p-6">Loading BOMs…</div>;
  }

  const handleCreate = async () => {
    try {
      await createBOM(newBOM);
      window.location.reload();
    } catch (err) {
      console.error('Error creating BOM:', err);
    }
  };

  const handleDelete = async (id) => {
    if (!window.confirm('Delete this BOM?')) return;
    try {
      await deleteBOM(id);
      window.location.reload();
    } catch (err) {
      console.error('Error deleting BOM:', err);
    }
  };

  return (
    <div className="p-6 space-y-6">
      <h1 className="text-2xl font-bold">BOM Definitions</h1>

      {/* Create BOM Form */}
      <div className="border p-4 rounded space-y-2">
        <h2 className="font-semibold">New BOM</h2>
        <input
          type="text"
          placeholder="Model Name"
          value={newBOM.modelName}
          onChange={e => setNewBOM({...newBOM, modelName: e.target.value})}
          className="w-full border rounded px-2 py-1"
        />
        <input
          type="text"
          placeholder="Revision"
          value={newBOM.revision}
          onChange={e => setNewBOM({...newBOM, revision: e.target.value})}
          className="w-24 border rounded px-2 py-1"
        />
        <textarea
          placeholder="Description"
          value={newBOM.description}
          onChange={e => setNewBOM({...newBOM, description: e.target.value})}
          className="w-full border rounded px-2 py-1"
        />
        <button
          onClick={handleCreate}
          className="px-4 py-2 bg-blue-600 text-white rounded"
        >
          Create BOM
        </button>
      </div>

      {/* BOM List */}
      <table className="w-full table-auto border-collapse">
        <thead>
          <tr className="bg-gray-100">
            <th className="border px-2 py-1">Model</th>
            <th className="border px-2 py-1">Revision</th>
            <th className="border px-2 py-1">Description</th>
            <th className="border px-2 py-1">Actions</th>
          </tr>
        </thead>
        <tbody>
          {boms.map(b => (
            <tr key={b.id} className="hover:bg-gray-50">
              <td className="border px-2 py-1">{b.modelName}</td>
              <td className="border px-2 py-1">{b.revision}</td>
              <td className="border px-2 py-1">{b.description}</td>
              <td className="border px-2 py-1 space-x-2">
                <button
                  onClick={() => setEditingId(b.id)}
                  className="text-blue-600 hover:underline"
                >
                  Edit
                </button>
                <button
                  onClick={() => handleDelete(b.id)}
                  className="text-red-600 hover:underline"
                >
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* Editor Modal */}
      {editingId && (
        <BOMEditor
          bomId={editingId}
          onClose={() => setEditingId(null)}
        />
      )}
    </div>
  );
}
5. src/components/BOMEditor.jsx
jsx
Copy
Edit
import React, { useState, useEffect } from 'react';
import useBOMDetails from '../hooks/useBOMDetails';
import {
  addBOMItem,
  updateBOMItem,
  deleteBOMItem,
  updateBOM
} from '../utils/bomUtils';

export default function BOMEditor({ bomId, onClose }) {
  const { bom, loading } = useBOMDetails(bomId);
  const [description, setDescription] = useState('');

  // Sync description when bom loads
  useEffect(() => {
    if (bom) setDescription(bom.description);
  }, [bom]);

  if (loading) return <div className="p-6">Loading BOM…</div>;
  if (!bom) return null;

  const handleSaveDesc = async () => {
    try {
      await updateBOM(bomId, { description });
    } catch (err) {
      console.error('Error updating description:', err);
    }
  };

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
      <div className="bg-white w-3/4 max-h-[90vh] p-6 rounded-lg space-y-4 overflow-auto">
        <h2 className="text-xl font-semibold">
          {bom.modelName} — Rev {bom.revision}
        </h2>

        <textarea
          value={description}
          onChange={e => setDescription(e.target.value)}
          className="w-full border rounded px-2 py-1"
        />
        <button
          onClick={handleSaveDesc}
          className="px-4 py-2 bg-gray-600 text-white rounded"
        >
          Save Description
        </button>

        {/* Items Table */}
        <table className="w-full table-auto border-collapse">
          <thead>
            <tr className="bg-gray-100">
              <th className="border px-2 py-1">Part Name</th>
              <th className="border px-2 py-1">Qty</th>
              <th className="border px-2 py-1">First Dept</th>
              <th className="border px-2 py-1">Actions</th>
            </tr>
          </thead>
          <tbody>
            {bom.items.map(item => (
              <tr key={item.id} className="hover:bg-gray-50">
                <td className="border px-2 py-1">{item.partName}</td>
                <td className="border px-2 py-1">{item.quantity}</td>
                <td className="border px-2 py-1">{item.firstDept}</td>
                <td className="border px-2 py-1 space-x-2">
                  <button
                    onClick={() =>
                      updateBOMItem(bomId, item.id, { quantity: item.quantity + 1 })
                    }
                    className="text-blue-600 hover:underline"
                  >
                    +1
                  </button>
                  <button
                    onClick={() => deleteBOMItem(bomId, item.id)}
                    className="text-red-600 hover:underline"
                  >
                    Delete
                  </button>
                </td>
              </tr>
            ))}
            {/* Add New Item Row */}
            <tr>
              <BOMNewItemRow bomId={bomId} />
            </tr>
          </tbody>
        </table>

        <div className="text-right">
          <button
            onClick={onClose}
            className="px-4 py-2 bg-gray-400 text-white rounded"
          >
            Close
          </button>
        </div>
      </div>
    </div>
  );
}

function BOMNewItemRow({ bomId }) {
  const [partName, setPartName] = useState('');
  const [quantity, setQuantity] = useState(1);
  const [firstDept, setFirstDept] = useState('Layup');

  const handleAdd = async () => {
    if (!partName) return;
    try {
      await addBOMItem(bomId, { partName, quantity, firstDept });
      setPartName('');
      setQuantity(1);
      setFirstDept('Layup');
    } catch (err) {
      console.error('Error adding BOM item:', err);
    }
  };

  return (
    <>
      <td className="border px-2 py-1">
        <input
          type="text"
          placeholder="Part name"
          value={partName}
          onChange={e => setPartName(e.target.value)}
          className="w-full border rounded px-1 py-1"
        />
      </td>
      <td className="border px-2 py-1">
        <input
          type="number"
          value={quantity}
          min={1}
          onChange={e => setQuantity(+e.target.value)}
          className="w-16 border rounded px-1 py-1"
        />
      </td>
      <td className="border px-2 py-1">
        <select
          value={firstDept}
          onChange={e => setFirstDept(e.target.value)}
          className="w-full border rounded px-1 py-1"
        >
          {['Layup','Assembly/Disassembly','Finish','Paint','QC','Shipping'].map(d => (
            <option key={d} value={d}>{d}</option>
          ))}
        </select>
      </td>
      <td className="border px-2 py-1">
        <button
          onClick={handleAdd}
          className="px-2 py-1 bg-green-600 text-white rounded"
        >
          Add
        </button>
      </td>
    </>
  );
}
6. Dependencies & Usage
bash
Copy
Edit
npm install axios react-hot-toast @headlessui/react
Routing: In your router (e.g., React Router), add:

jsx
Copy
Edit
import BOMAdmin from './components/BOMAdmin';

// ...
<Route path="/admin/boms" element={<BOMAdmin />} />
Backend: Ensure your API supports:

GET /api/boms

POST /api/boms

GET /api/boms/:id

PUT /api/boms/:id

DELETE /api/boms/:id

POST /api/boms/:id/items

PUT /api/boms/:id/items/:itemId

DELETE /api/boms/:id/items/:itemId