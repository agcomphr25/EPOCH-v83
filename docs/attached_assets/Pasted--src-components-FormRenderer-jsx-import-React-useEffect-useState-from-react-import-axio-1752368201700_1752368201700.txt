// src/components/FormRenderer.jsx
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import toast from 'react-hot-toast';

export default function FormRenderer({ formId, userRole }) {
  const [formDef, setFormDef] = useState(null);
  const [formData, setFormData] = useState({});
  const [loading, setLoading] = useState(true);

  // 1️⃣ Fetch form definition
  useEffect(() => {
    axios.get(`/api/forms/${formId}`)
      .then(res => {
        setFormDef(res.data);
        // initialize formData only for visible fields
        const initial = {};
        res.data.fields
          .filter(f=>f.roles.includes(userRole))
          .forEach(f=> initial[f.key] = f.type==='checkbox' ? false : '');
        setFormData(initial);
      })
      .catch(()=>toast.error('Load failed'))
      .finally(()=>setLoading(false));
  }, [formId, userRole]);

  if (loading) return <div>Loading form…</div>;
  if (!formDef) return <div>Form not found</div>;

  const visibleFields = formDef.fields.filter(f=>f.roles.includes(userRole));

  const handleChange = (key, value) => {
    setFormData(prev => ({ ...prev, [key]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await axios.post('/api/form-submissions', {
        formId,
        data: formData
      });
      toast.success('Submission saved');
      // reset
      const cleared = {};
      visibleFields.forEach(f=> cleared[f.key] = f.type==='checkbox' ? false : '');
      setFormData(cleared);
    } catch {
      toast.error('Submit failed');
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <h1 className="text-2xl font-bold">{formDef.name}</h1>

      {visibleFields.map(f => (
        <div key={f.key} className="flex flex-col">
          <label className="mb-1 font-medium">
            {f.label}{f.required && <span className="text-red-500">*</span>}
          </label>

          {f.type === 'text' && (
            <input
              type="text"
              className="border p-2 rounded"
              required={f.required}
              value={formData[f.key]}
              onChange={e=>handleChange(f.key, e.target.value)}
            />
          )}

          {f.type === 'number' && (
            <input
              type="number"
              className="border p-2 rounded"
              required={f.required}
              value={formData[f.key]}
              onChange={e=>handleChange(f.key, e.target.value)}
            />
          )}

          {f.type === 'date' && (
            <input
              type="date"
              className="border p-2 rounded"
              required={f.required}
              value={formData[f.key]}
              onChange={e=>handleChange(f.key, e.target.value)}
            />
          )}

          {f.type === 'textarea' && (
            <textarea
              className="border p-2 rounded"
              required={f.required}
              value={formData[f.key]}
              onChange={e=>handleChange(f.key, e.target.value)}
            />
          )}

          {f.type === 'checkbox' && (
            <input
              type="checkbox"
              className="self-start"
              checked={formData[f.key]}
              onChange={e=>handleChange(f.key, e.target.checked)}
            />
          )}

          {f.type === 'dropdown' && (
            <select
              className="border p-2 rounded"
              required={f.required}
              value={formData[f.key]}
              onChange={e=>handleChange(f.key, e.target.value)}
            >
              <option value="">— Select —</option>
              {f.options.map(opt=>(
                <option key={opt} value={opt}>{opt}</option>
              ))}
            </select>
          )}

          {f.type === 'autocomplete' && (
            <>
              <input
                list={`dl-${f.key}`}
                className="border p-2 rounded"
                required={f.required}
                value={formData[f.key]}
                onChange={e=>handleChange(f.key, e.target.value)}
              />
              <datalist id={`dl-${f.key}`}>
                {f.options.map(opt=>(
                  <option key={opt} value={opt} />
                ))}
              </datalist>
            </>
          )}
        </div>
      ))}

      <button
        type="submit"
        className="bg-blue-600 text-white px-4 py-2 rounded"
      >Submit</button>
    </form>
  );
}
